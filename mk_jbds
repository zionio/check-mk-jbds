#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2017 Andrea <zionio@fusilab.net>

# MIT License

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import json, os, sys
import urllib2


def fetch_url(url, config):
    try:
        authhandler = urllib2.HTTPDigestAuthHandler()
        authhandler.add_password(config["realm"], url, config["username"], config["password"])
        opener = urllib2.build_opener(authhandler)
        urllib2.install_opener(opener)
        page_content = urllib2.urlopen(url, timeout=5)
        return page_content
    except Exception, e:
        sys.stderr.write("ERR: %s_%s_%s %s\n" % (mk_check_name, server, ds, e))


# MAIN
settings = {}
mk_check_name = "JBDS"
cfg_file = "mk_jbds.cfg"
perf_data = ""
# exclude master node from list
mastername = "master"
config = os.getenv("MK_CONFDIR", "/etc/check_mk") + "/" + cfg_file

try:
    with open(config) as f:
        settings = eval(f.read())
except Exception, e:
    sys.stderr.write("ERR: config file '%s' not found, check env MK_CONFDIR\n" % cfg_file)
    sys.exit(1)

for cfg in settings["instances"]:
    baseurl = cfg["protocol"] + "://" + cfg["host"] + ":" + cfg["port"] + "/management"
    html = fetch_url(baseurl, cfg)
    try:
        s_host = json.loads(html.read())
    except:
        print("FATAL: Something went wrong.")
        sys.exit(1)
    # STANDALONE
    if "host" not in s_host:
        url = baseurl + "/subsystem/datasources"
        html = fetch_url(url, cfg)
        try:
            s_ds = json.loads(html.read())
        except:
            continue
        if s_ds["data-source"]:
            for ds in s_ds["data-source"].keys():
                dsurl = url + "/data-source/" + ds + "/statistics/pool?include-runtime"
                html = fetch_url(dsurl, cfg)
                s_stats = json.loads(html.read())
                for key, value in s_stats.items():
                    for stats in cfg["stats"]:
                        if key == stats["name"]:
                            perf_data += key + "=" + value + ";" + stats["warn_lower"] + ":" + stats["warn_upper"] + ";" + \
                                         stats["crit_lower"] + ":" + stats["crit_upper"] + "|"
                print ("P %s_%s %s" % (mk_check_name, ds, perf_data[:-1]))
                perf_data = ""
        if s_ds["xa-data-source"]:
            for ds in s_ds["xa-data-source"].keys():
                dsurl = url + "/xa-data-source/" + ds + "/statistics/pool?include-runtime"
                html = fetch_url(dsurl, cfg)
                s_stats = json.loads(html.read())
                for key, value in s_stats.items():
                    for stats in cfg["stats"]:
                        if key == stats["name"]:
                            perf_data += key + "=" + value + ";" + stats["warn_lower"] + ":" + stats["warn_upper"] + ";" + \
                                         stats["crit_lower"] + ":" + stats["crit_upper"] + "|"
                print ("P %s_%s %s" % (mk_check_name, ds, perf_data[:-1]))
                perf_data = ""
    else:
        # DOMAIN
        for host in s_host["host"].keys():
            if mastername not in host:
                hosturl = baseurl + "/host/" + host + "/server/"
                html = fetch_url(hosturl, cfg)
                s_server = json.loads(html.read())
                for server in s_server["server"].keys():
                    serverurl = hosturl + server + "/subsystem/datasources"
                    html = fetch_url(serverurl, cfg)
                    try:
                        s_ds = json.loads(html.read())
                    except:
                        continue
                    if s_ds["data-source"]:
                        for ds in s_ds["data-source"].keys():
                            dsurl = serverurl + "/data-source/" + ds + "/statistics/pool?include-runtime"
                            html = fetch_url(dsurl, cfg)
                            s_stats = json.loads(html.read())
                            for key, value in s_stats.items():
                                for stats in cfg["stats"]:
                                    if key == stats["name"]:
                                        perf_data += key + "=" + value + ";" + stats["warn_lower"] + ":" + stats[
                                            "warn_upper"] + ";" + stats["crit_lower"] + ":" + stats["crit_upper"] + "|"
                            print ("P %s_%s_%s %s" % (mk_check_name, server, ds, perf_data[:-1]))
                            perf_data = ""
                    if s_ds["xa-data-source"]:
                        for ds in s_ds["xa-data-source"].keys():
                            dsurl = serverurl + "/xa-data-source/" + ds + "/statistics/pool?include-runtime"
                            html = fetch_url(dsurl, cfg)
                            s_stats = json.loads(html.read())
                            for key, value in s_stats.items():
                                for stats in cfg["stats"]:
                                    if key == stats["name"]:
                                        perf_data += key + "=" + value + ";" + stats["warn_lower"] + ":" + stats[
                                            "warn_upper"] + ";" + stats["crit_lower"] + ":" + stats["crit_upper"] + "|"
                            print ("P %s_%s_%s %s" % (mk_check_name, server, ds, perf_data[:-1]))
                            perf_data = ""
